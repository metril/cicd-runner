name: Gitlab Runner Service - Windows
on:
  workflow_dispatch:
    inputs:
      tailscale_authkey:
        description: 'Tailscale Auth Key'
        required: true
      registration_token:
        description: 'GitLab Runner Registration Token'
        required: true
      gitlab_url:
        description: 'GitLab URL'
        required: true
      docker_image:
        description: 'Docker Image'
        required: true
jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Chocolatey Install
        shell: powershell
        run: Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        
      - name: Install Tailscale
        shell: powershell
        run: choco install tailscale
        
      - name: Run Tailscale
        shell: powershell
        env:
          AUTHKEY: "${{ inputs.tailscale_authkey }}"
        run: |
          & 'C:\Program Files\Tailscale\tailscale.exe' up --authkey ${env:AUTHKEY} --hostname=$HOSTNAME --accept-routes --unattended
          
      - name: Static DNS Entry
        shell: powershell
        run: |
          add-content c:\windows\system32\drivers\etc\hosts "10.10.77.19 gitlab.azureolympos.com”
          add-content c:\windows\system32\drivers\etc\hosts "10.10.77.19 registry.gitlab.azureolympos.com”
          add-content c:\windows\system32\drivers\etc\hosts "10.10.77.43 vault.azureolympos.com”
          ipconfig /flushdns

      - name: Install GitLab Runner from Chocolatey
        shell: powershell
        run: choco install gitlab-runner

      - name: Register GitLab Runner
        shell: powershell
        run: gitlab-runner.exe register --non-interactive --executor "shell" --url "${{ inputs.gitlab_url }}" --registration-token "${{ inputs.registration_token }}" --tag-list "githubrunner-windows" --run-untagged --locked="false" --name $env:COMPUTERNAME

      - name: Install GitLab Runner Service
        shell: powershell
        run: gitlab-runner.exe install
        
      - name: Start GitLab Runner
        shell: powershell
        run: gitlab-runner.exe start

      - name: Check Job Status
        shell: powershell
        run: |
          while ($true) {
            $status = Get-WinEvent -ProviderName gitlab-runner
            if (($status | Where-Object -Property Message -Match "Job succeeded") -Or ($status | Where-Object -Property Message -Match "Failed to process runner")) {
              break
            }
            Write-Host "Waiting for job status to change..."
            Start-Sleep -s 10
          }

      - name: Stop GitLab Runner
        shell: powershell
        run: gitlab-runner.exe stop

      - name: Unregister GitLab Runner
        shell: powershell
        run: gitlab-runner.exe unregister --name $env:COMPUTERNAME


      
